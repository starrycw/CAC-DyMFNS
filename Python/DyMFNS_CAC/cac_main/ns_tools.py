# !/usr/bin/env python3
# -*- coding: utf-8 -*-
# @Time    : 2021/12/30
# @Author  : c
import math
import AdaptiveFNS.adaptivefns_generation
import DyMFNS.dymfns_generation

def verilog_get_adders_po_len_adaptivefns(n, print_header=True):
    '''
    输出AdaptiveFNS中各个数系加法器的输出位宽。
    参照Repair the faulty TSVs with the improved FNS-CAC codec，第一个adder（idx=0）输入为1和0，无故障情况下输出为1和1。

    返回值：OUT_A最大输出值元组， OUT_A位宽元组， OUT_B最大输出值元组， OUT_B位宽元组，

    :param n:
    :param print_header:
    :return:
    '''

    assert isinstance(n, int)
    assert n > 0

    ns_tuple = AdaptiveFNS.adaptivefns_generation.generate_adaptivefns(n=n+1, tuple_flags=(n+1)*(0,))
    ns_bin_len = []
    for temp_ns_i in ns_tuple:
        bin_ceil = math.ceil( math.log2(temp_ns_i+1) )
        ns_bin_len.append(bin_ceil)

    list_len_po_a = []
    list_len_po_b = []
    list_po_a = []
    list_po_b = []
    for temp_idx_main in range(0, n):
        list_len_po_a.append( ns_bin_len[temp_idx_main+1] )
        list_len_po_b.append( ns_bin_len[temp_idx_main] )
        list_po_a.append( ns_tuple[temp_idx_main+1] )
        list_po_b.append( ns_tuple[temp_idx_main] )
        if print_header:
            print("// idx={}, Adder {} --- OUT_A: {}, {}-bit; OUT_B: {}, {}-bit.".format(
                temp_idx_main, temp_idx_main+1, list_po_a[-1], list_len_po_a[-1], list_po_b[-1], list_len_po_b[-1]))
            print("`define AFNS_ADDER_OUTA_BLEN_{} {}".format(temp_idx_main+1, list_len_po_a[-1]))
            print("`define AFNS_ADDER_OUTB_BLEN_{} {}".format(temp_idx_main + 1, list_len_po_b[-1]))
    return tuple(list_po_a), tuple(list_len_po_a), tuple(list_po_b), tuple(list_len_po_b)


def verilog_generate_code_AFNSAdder(adder_id):
    '''
    生成AFNS_Adder_XX.v中的代码。

    :param adder_id:
    :return:
    '''
    assert isinstance(adder_id, int)
    assert adder_id > 1

    print("// Generated by cac_main.ns_tools.verilog_generate_code_AFNSAdder(), version: 2022010100.")
    print("`include \"Header_AdaptiveFNS.vh\"")
    print("module AFNS_Adder_X{}(".format(adder_id))
    print("    input wire flag,")
    print("    input wire [`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] in_a,".format(adder_id-1))
    print("    input wire [`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0] in_b,".format(adder_id-1))
    print("    output wire [`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] out_a,".format(adder_id))
    print("    output wire [`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0] out_b".format(adder_id))
    print("     );")
    print("    ")
    print("    wire [`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] sum;".format(adder_id))
    print("    ")
    print("    assign sum[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] = in_a[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] + in_b[`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0];".format(
        adder_id, adder_id-1, adder_id-1))
    print("    assign out_a[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] = (flag == 1'b0) ? (sum[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0]) : (in_a[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0]);".format(
        adder_id, adder_id, adder_id-1))
    print("    assign out_b[`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0] = (flag == 1'b0) ? (in_a[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0]) : (in_b[`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0]);".format(
        adder_id, adder_id-1, adder_id-1))
    print("    ")
    print("endmodule")
    print("// End")


def verilog_get_adders_po_len_dymfns(n, print_header=True):
    '''
    输出DyMFNS中各个数系加法器的输出位宽。
    第一个adder（idx=0）输入为1和0，无故障情况下输出为1和1。

    返回值：OUT_A最大输出值元组， OUT_A位宽元组， OUT_B最大输出值元组， OUT_B位宽元组。
    需要注意的是，对于DyMFNS来说，一个数系加法器可能输出的最大值并非对应的FNS数系值，而是更高一位的FNS数系值（即在它之前的加法器都无故障且它后边相邻的那个加法器有故障时）。

    :param n:
    :param print_header:
    :return:
    '''

    assert isinstance(n, int)
    assert n > 0

    list_po_a_bin_len = []
    list_po_a_max = []
    for temp_adder_idx_i in range(0, n):
        temp_ns_tuples = DyMFNS.dymfns_generation.generate_dymfns_with_segmentations(n=temp_adder_idx_i+1, tuple_flags=(temp_adder_idx_i+1) * (0,))
        temp_max_value = temp_ns_tuples[0][-1]
        bin_ceil = math.ceil(math.log2(temp_max_value + 1))
        list_po_a_bin_len.append(bin_ceil)
        list_po_a_max.append(temp_max_value)

        if print_header:
            print("// idx={}, Adder {} --- OUT_A(max): {}, {}-bit; OUT_B(max): {}, {}-bit.".format(
                temp_adder_idx_i, temp_adder_idx_i + 1, list_po_a_max[-1], list_po_a_bin_len[-1], list_po_a_max[-1], list_po_a_bin_len[-1]))
            print("`define DYMFNS_ADDER_OUTA_BLEN_{} {}".format(temp_adder_idx_i + 1, list_po_a_bin_len[-1]))
            print("`define DYMFNS_ADDER_OUTB_BLEN_{} {}".format(temp_adder_idx_i + 1, list_po_a_bin_len[-1]))
    return tuple(list_po_a_max), tuple(list_po_a_bin_len)











#################################main
verilog_get_adders_po_len_dymfns(n=25)



