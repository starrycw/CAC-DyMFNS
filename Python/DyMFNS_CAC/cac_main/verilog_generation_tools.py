# !/usr/bin/env python3
# -*- coding: utf-8 -*-
# @Time    : 2021/12/30
# @Author  : c
import math
import AdaptiveFNS.adaptivefns_generation
import DyMFNS.dymfns_generation

def verilog_get_adders_po_len_adaptivefns(n, print_header=True):
    '''
    输出AdaptiveFNS中各个数系加法器的输出位宽。
    参照Repair the faulty TSVs with the improved FNS-CAC codec，第一个adder（idx=0）输入为1和0，无故障情况下输出为1和1。

    返回值：OUT_A最大输出值元组， OUT_A位宽元组， OUT_B最大输出值元组， OUT_B位宽元组，

    :param n:
    :param print_header:
    :return:
    '''

    assert isinstance(n, int)
    assert n > 0

    ns_tuple = AdaptiveFNS.adaptivefns_generation.generate_adaptivefns(n=n+1, tuple_flags=(n+1)*(0,))
    ns_bin_len = []
    for temp_ns_i in ns_tuple:
        bin_ceil = math.ceil( math.log2(temp_ns_i+1) )
        ns_bin_len.append(bin_ceil)

    list_len_po_a = []
    list_len_po_b = []
    list_po_a = []
    list_po_b = []
    for temp_idx_main in range(0, n):
        list_len_po_a.append( ns_bin_len[temp_idx_main+1] )
        list_len_po_b.append( ns_bin_len[temp_idx_main] )
        list_po_a.append( ns_tuple[temp_idx_main+1] )
        list_po_b.append( ns_tuple[temp_idx_main] )
        if print_header:
            print("// idx={}, Adder {} --- OUT_A: {}, {}-bit; OUT_B: {}, {}-bit.".format(
                temp_idx_main, temp_idx_main+1, list_po_a[-1], list_len_po_a[-1], list_po_b[-1], list_len_po_b[-1]))
            print("`define AFNS_ADDER_OUTA_BLEN_{} {}".format(temp_idx_main+1, list_len_po_a[-1]))
            print("`define AFNS_ADDER_OUTB_BLEN_{} {}".format(temp_idx_main + 1, list_len_po_b[-1]))
    return tuple(list_po_a), tuple(list_len_po_a), tuple(list_po_b), tuple(list_len_po_b)


def verilog_generate_AFNSAdder(adder_id):
    '''
    生成AFNS_Adder_XX.v中的代码。

    :param adder_id:
    :return:
    '''
    assert isinstance(adder_id, int)
    assert adder_id > 1

    print("// Generated by cac_main.verilog_generation_tools.verilog_generate_code_AFNSAdder(), version: 2022010100.")
    print("`include \"Header_AdaptiveFNS.vh\"")
    print("module AFNS_Adder_X{}(".format(adder_id))
    print("    input wire flag,")
    print("    input wire [`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] in_a,".format(adder_id-1))
    print("    input wire [`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0] in_b,".format(adder_id-1))
    print("    output wire [`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] out_a,".format(adder_id))
    print("    output wire [`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0] out_b".format(adder_id))
    print("     );")
    print("    ")
    print("    wire [`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] sum;".format(adder_id))
    print("    ")
    print("    assign sum[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] = in_a[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] + in_b[`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0];".format(
        adder_id, adder_id-1, adder_id-1))
    print("    assign out_a[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] = (flag == 1'b0) ? (sum[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0]) : (in_a[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0]);".format(
        adder_id, adder_id, adder_id-1))
    print("    assign out_b[`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0] = (flag == 1'b0) ? (in_a[`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0]) : (in_b[`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0]);".format(
        adder_id, adder_id-1, adder_id-1))
    print("    ")
    print("endmodule")
    print("// End")


def verilog_get_adders_po_len_dymfns(n, print_header=True):
    '''
    输出DyMFNS中各个数系加法器的输出位宽。
    第一个adder（idx=0）输入为1和0，无故障情况下输出为1和1。

    返回值：OUT_A最大输出值元组， OUT_A位宽元组， OUT_B最大输出值元组， OUT_B位宽元组。
    需要注意的是，对于DyMFNS来说，一个数系加法器可能输出的最大值并非对应的FNS数系值，而是更高一位的FNS数系值（即在它之前的加法器都无故障且它后边相邻的那个加法器有故障时）。

    :param n:
    :param print_header:
    :return:
    '''

    assert isinstance(n, int)
    assert n > 0

    list_po_a_bin_len = []
    list_po_a_max = []
    for temp_adder_idx_i in range(0, n):
        temp_ns_tuples = DyMFNS.dymfns_generation.generate_dymfns_with_segmentations(n=temp_adder_idx_i+1, tuple_flags=(temp_adder_idx_i+1) * (0,))
        temp_max_value = temp_ns_tuples[0][-1]
        bin_ceil = math.ceil(math.log2(temp_max_value + 1))
        list_po_a_bin_len.append(bin_ceil)
        list_po_a_max.append(temp_max_value)

        if print_header:
            print("// idx={}, Adder {} --- OUT_A(max): {}, {}-bit; OUT_B(max): {}, {}-bit.".format(
                temp_adder_idx_i, temp_adder_idx_i + 1, list_po_a_max[-1], list_po_a_bin_len[-1], list_po_a_max[-1], list_po_a_bin_len[-1]))
            print("`define DYMFNS_ADDER_OUTA_BLEN_{} {}".format(temp_adder_idx_i + 1, list_po_a_bin_len[-1]))
            print("`define DYMFNS_ADDER_OUTB_BLEN_{} {}".format(temp_adder_idx_i + 1, list_po_a_bin_len[-1]))
    return tuple(list_po_a_max), tuple(list_po_a_bin_len)


def verilog_generate_DyMFNSAdder(adder_id):
    '''
    生成DyMFNS_Adder_XX.v中的代码。

    :param adder_id:
    :return:
    '''

    assert isinstance(adder_id, int)
    assert adder_id > 1

    print("// Generated by cac_main.verilog_generation_tools.verilog_generate_code_AFNSAdder(), version: 2022010700.")
    print("`include \"Header_DyMFNS.vh\"")
    print("module DyMFNS_Adder_X{}(".format(adder_id))
    print("    input wire flag_left,")
    print("    input wire flag,")
    print("    input wire flag_right,")
    print("    input wire flag_notlsb_in,")
    print("    input wire [`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0] in_a,".format(adder_id-1))
    print("    input wire [`DYMFNS_ADDER_OUTB_BLEN_{} - 1 : 0] in_b,".format(adder_id-1))
    print("    output wire flag_notlsb_out,")
    print("    output wire [`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0] out_a,".format(adder_id))
    print("    output wire [`DYMFNS_ADDER_OUTB_BLEN_{} - 1 : 0] out_b".format(adder_id))
    print("    );")
    print("    ")
    print("    wire [`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0] sum;".format(adder_id))
    print("    wire [`DYMFNS_ADDER_OUTA_BLEN_{} : 0] a_shift;".format(adder_id-1))
    print("    wire [`DYMFNS_ADDER_OUTB_BLEN_{} : 0] b_shift;".format(adder_id-1))
    print("    wire flag_left_mid;")
    print("    ")
    print("    assign flag_left_mid = (flag_left & flag_notlsb_in) | flag;")
    print("    assign sum[`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0] = in_a[`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0] + in_b[`DYMFNS_ADDER_OUTB_BLEN_{} - 1 : 0];".format(
        adder_id, adder_id-1, adder_id-1))
    print("    assign a_shift[`DYMFNS_ADDER_OUTA_BLEN_{} : 0] = (flag == 1'b0) ? (in_a[`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0] << 1) : (in_a[`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0]);".format(
        adder_id-1, adder_id-1, adder_id-1))
    print("    assign b_shift[`DYMFNS_ADDER_OUTB_BLEN_{} : 0] = (flag == 1'b0) ? (in_b[`DYMFNS_ADDER_OUTB_BLEN_{} - 1 : 0] << 1) : (in_b[`DYMFNS_ADDER_OUTB_BLEN_{} - 1 : 0]);".format(
        adder_id-1, adder_id-1, adder_id-1))
    print("    ")
    print("    assign out_a[`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0] = (flag_left_mid == 1'b0) ? (sum[`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0]) : (a_shift[`DYMFNS_ADDER_OUTA_BLEN_{} : 0]);".format(
        adder_id, adder_id, adder_id-1))
    print("    assign out_b[`DYMFNS_ADDER_OUTB_BLEN_{} - 1 : 0] = (flag_left_mid == 1'b0) ? ( (flag_right == 1'b0) ? (in_a[`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0]) : (sum[`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0]) ) : (b_shift[`DYMFNS_ADDER_OUTB_BLEN_{} : 0]);".format(
        adder_id, adder_id-1, adder_id, adder_id-1))
    print("    ")
    print("    assign flag_notlsb_out = flag_notlsb_in | (~flag);")
    print("    ")
    print("endmodule")
    print("")
    print("// END")


def sverilog_generate_simuDyMFNSAdders(n):
    '''


    :param n:
    :return:
    '''
    assert isinstance(n, int)
    assert n > 1
    assert n < 100

    def print_adder_instance(id):
        assert 1 < id <= n
        if id < 10:
            id_str = "0{}".format(id)
        else:
            id_str = "{}".format(id)

        if id - 1 < 10:
            id_str_last = "0{}".format(id-1)
        else:
            id_str_last = "{}".format(id-1)

        print("    // Adder {}".format(id))
        print("    wire [`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0] out_a_{};".format(id, id_str))
        print("    wire [`DYMFNS_ADDER_OUTB_BLEN_{} - 1 : 0] out_b_{};".format(id, id_str))

        print("    DyMFNS_Adder_{} adder{}(.flag_left(flags[{}]), ".format(id_str, id_str, id-1))
        print("                            .flag(flags[{}]),".format(id))
        print("                            .flag_right(flags[{}]),".format(id+1))
        print("                            .flag_notlsb_in(flags_notlsb[{}]), ".format(id))
        print("                            .in_a(out_a_{}),".format(id_str_last))
        print("                            .in_b(out_b_{}),".format(id_str_last))
        print("                            .flag_notlsb_out(flags_notlsb[{}]),".format(id+1))
        print("                            .out_a(out_a_{}),".format(id_str))
        print("                            .out_b(out_b_{})".format(id_str))
        print("                            );")
        print("    ")

    # 头部
    str_outa = ", out_a_01"
    str_outb = ", out_b_01"
    str_format = "%d"
    print("// Generated by cac_main.verilog_generation_tools. Version: 2022.01.02.00")
    print("`include \"Header_DyMFNS.vh\"")
    print("module simu_DyMFNS_Adders(")
    print("    ")
    print("    );")
    print("    ")
    print("    // flags")
    print("    reg [1:{}] flags;".format(n))
    print("    wire [{}:2] flags_notlsb; ".format(n))
    print("    ")

    # LSB加法器
    print("//////////////////////////////////////////////////////////////////////////////////")
    print("// Design")
    print("//////////////////////////////////////////////////////////////////////////////////")
    print("    ")
    print("    // Adder 1")
    print("    wire out_a_01;")
    print("    wire out_b_01;")
    print("    DyMFNS_Adder_01 adder01(.flag(flags[1]), .flag_notlsb_out(flags_notlsb[2]), .out_a(out_a_01), .out_b(out_b_01));")
    print("    ")

    # 中间的加法器
    for temp_id in range(2, n):
        print_adder_instance(id=temp_id)
        if temp_id < 10:
            id_str = "0{}".format(temp_id)
        else:
            id_str = "{}".format(temp_id)
        str_outa = str_outa + ", out_a_{}".format(id_str)
        str_outb = str_outb + ", out_b_{}".format(id_str)
        str_format = str_format + ", %d"


    # MSB加法器
    id = n
    if id < 10:
        id_str = "0{}".format(id)
    else:
        id_str = "{}".format(id)

    if id - 1 < 10:
        id_str_last = "0{}".format(id - 1)
    else:
        id_str_last = "{}".format(id - 1)

    str_outa = str_outa + ", out_a_{}".format(id_str)
    str_outb = str_outb + ", out_b_{}".format(id_str)
    str_format = str_format + ", %d"


    print("    // Adder {}".format(id))
    print("    wire [`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0] out_a_{};".format(id, id_str))
    print("    wire [`DYMFNS_ADDER_OUTB_BLEN_{} - 1 : 0] out_b_{};".format(id, id_str))

    print("    DyMFNS_Adder_{} adder{}(.flag_left(flags[{}]), ".format(id_str, id_str, id - 1))
    print("                            .flag(flags[{}]),".format(id))
    print("                            .flag_right(1'b1),")
    print("                            .flag_notlsb_in(flags_notlsb[{}]), ".format(id))
    print("                            .in_a(out_a_{}),".format(id_str_last))
    print("                            .in_b(out_b_{}),".format(id_str_last))
    print("                            .flag_notlsb_out(),")
    print("                            .out_a(out_a_{}),".format(id_str))
    print("                            .out_b(out_b_{})".format(id_str))
    print("                            );")
    print("    ")


    print("//////////////////////////////////////////////////////////////////////////////////")
    print("// Simulation")
    print("//////////////////////////////////////////////////////////////////////////////////")
    print("    initial begin")
    print("        flags <= 0;")
    print("        # 10;")
    print("        $display(\"FLAGS: %b\", flags);")
    print("        $display(\"OUT A: {}\"{});".format(str_format, str_outa))
    print("        $display(\"OUT B: {}\"{});".format(str_format, str_outb))
    print("        ")
    print("        # 10;")
    print("        flags <= 1;")
    print("        # 10;")
    print("        $display(\"FLAGS: %b\", flags);")
    print("        $display(\"OUT A: {}\"{});".format(str_format, str_outa))
    print("        $display(\"OUT B: {}\"{});".format(str_format, str_outb))
    print("        $finish();")
    print("    end")


    print("endmodule")




def sverilog_generate_simuAFNSAdders(n):
    '''


    :param n:
    :return:
    '''
    assert isinstance(n, int)
    assert n > 1
    assert n < 100

    def print_adder_instance(id):
        assert 1 < id <= n
        if id < 10:
            id_str = "0{}".format(id)
        else:
            id_str = "{}".format(id)

        if id - 1 < 10:
            id_str_last = "0{}".format(id-1)
        else:
            id_str_last = "{}".format(id-1)

        print("    // Adder {}".format(id))
        print("    wire [`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] out_a_{};".format(id, id_str))
        print("    wire [`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0] out_b_{};".format(id, id_str))

        print("    AFNS_Adder_{} adder{}( ".format(id_str, id_str))
        print("                            .flag(flags[{}]),".format(id))
        print("                            .in_a(out_a_{}),".format(id_str_last))
        print("                            .in_b(out_b_{}),".format(id_str_last))
        print("                            .out_a(out_a_{}),".format(id_str))
        print("                            .out_b(out_b_{})".format(id_str))
        print("                            );")
        print("    ")

    # 头部
    str_outa = ", out_a_01"
    str_outb = ", out_b_01"
    str_format = "%d"
    print("// Generated by cac_main.verilog_generation_tools. Version: 2022.01.02.00")
    print("`include \"Header_AdaptiveFNS.vh\"")
    print("module simu_AFNS_Adders(")
    print("    ")
    print("    );")
    print("    ")
    print("    // flags")
    print("    reg [1:{}] flags;".format(n))
    print("    ")

    # LSB加法器
    print("//////////////////////////////////////////////////////////////////////////////////")
    print("// Design")
    print("//////////////////////////////////////////////////////////////////////////////////")
    print("    ")
    print("    // Adder 1")
    print("    wire out_a_01;")
    print("    wire out_b_01;")
    print("    AFNS_Adder_01 adder01(.flag(flags[1]), .out_a(out_a_01), .out_b(out_b_01));")
    print("    ")

    # 中间的加法器
    for temp_id in range(2, n):
        print_adder_instance(id=temp_id)
        if temp_id < 10:
            id_str = "0{}".format(temp_id)
        else:
            id_str = "{}".format(temp_id)
        str_outa = str_outa + ", out_a_{}".format(id_str)
        str_outb = str_outb + ", out_b_{}".format(id_str)
        str_format = str_format + ", %d"


    # MSB加法器
    id = n
    if id < 10:
        id_str = "0{}".format(id)
    else:
        id_str = "{}".format(id)

    if id - 1 < 10:
        id_str_last = "0{}".format(id - 1)
    else:
        id_str_last = "{}".format(id - 1)

    str_outa = str_outa + ", out_a_{}".format(id_str)
    str_outb = str_outb + ", out_b_{}".format(id_str)
    str_format = str_format + ", %d"


    print("    // Adder {}".format(id))
    print("    wire [`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] out_a_{};".format(id, id_str))
    print("    wire [`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0] out_b_{};".format(id, id_str))

    print("    AFNS_Adder_{} adder{}( ".format(id_str, id_str))
    print("                            .flag(flags[{}]),".format(id))
    print("                            .in_a(out_a_{}),".format(id_str_last))
    print("                            .in_b(out_b_{}),".format(id_str_last))
    print("                            .out_a(out_a_{}),".format(id_str))
    print("                            .out_b(out_b_{})".format(id_str))
    print("                            );")
    print("    ")


    print("//////////////////////////////////////////////////////////////////////////////////")
    print("// Simulation")
    print("//////////////////////////////////////////////////////////////////////////////////")
    print("    initial begin")
    print("        flags <= 0;")
    print("        # 10;")
    print("        $display(\"FLAGS: %b\", flags);")
    print("        $display(\"OUT A: {}\"{});".format(str_format, str_outa))
    print("        $display(\"OUT B: {}\"{});".format(str_format, str_outb))
    print("        ")
    print("        # 10;")
    print("        flags <= 1;")
    print("        # 10;")
    print("        $display(\"FLAGS: %b\", flags);")
    print("        $display(\"OUT A: {}\"{});".format(str_format, str_outa))
    print("        $display(\"OUT B: {}\"{});".format(str_format, str_outb))
    print("        $finish();")
    print("    end")


    print("endmodule")


def verilog_generate_CascadedAFNSAddersNormal(n):
    '''


    :param n:
    :return:
    '''
    assert isinstance(n, int)
    assert n > 1
    assert n < 100

    def print_output_ports_decl(id, is_end):
        assert 1 < id <= n
        if id < 10:
            id_str = "0{}".format(id)
        else:
            id_str = "{}".format(id)

        if id - 1 < 10:
            id_str_last = "0{}".format(id-1)
        else:
            id_str_last = "{}".format(id-1)

        if is_end:
            endstr = ""
        else:
            endstr = ","
        print("    output wire [`AFNS_ADDER_OUTA_BLEN_{} - 1 : 0] out_a_{},".format(id, id_str))
        print("    output wire [`AFNS_ADDER_OUTB_BLEN_{} - 1 : 0] out_b_{}{}".format(id, id_str, endstr))


    def print_adder_instance(id):
        assert 1 < id <= n
        if id < 10:
            id_str = "0{}".format(id)
        else:
            id_str = "{}".format(id)

        if id - 1 < 10:
            id_str_last = "0{}".format(id-1)
        else:
            id_str_last = "{}".format(id-1)

        print("    // Adder {}".format(id))

        print("    AFNS_Adder_{} adder{}( ".format(id_str, id_str))
        print("                            .flag(flags[{}]),".format(id))
        print("                            .in_a(out_a_{}),".format(id_str_last))
        print("                            .in_b(out_b_{}),".format(id_str_last))
        print("                            .out_a(out_a_{}),".format(id_str))
        print("                            .out_b(out_b_{})".format(id_str))
        print("                            );")
        print("    ")

    # 头部
    if n < 10:
        n_str = "0{}".format(n)
    else:
        n_str = "{}".format(n)
    print("// Generated by cac_main.verilog_generation_tools. Version: 2022.01.07.00")
    print("`include \"Header_AdaptiveFNS.vh\"")
    print("module AFNS_CascadedAdders_N{}(".format(n_str))
    print("    // flags")
    print("    input wire [1:{}] flags,".format(n))
    print("    // output ports")
    print("    output wire out_a_01,")
    print("    output wire out_b_01,")
    for temp_id_i in range(2, n):
        print_output_ports_decl(id=temp_id_i, is_end=False)
    print_output_ports_decl(id=n, is_end=True)
    print("    );")
    print("    ")


    # LSB加法器
    print("//////////////////////////////////////////////////////////////////////////////////")
    print("// Design")
    print("//////////////////////////////////////////////////////////////////////////////////")
    print("    ")
    print("    // Adder 1")
    print("    AFNS_Adder_01 adder01(.flag(flags[1]), .out_a(out_a_01), .out_b(out_b_01));")
    print("    ")

    # 中间的加法器
    for temp_id in range(2, n):
        print_adder_instance(id=temp_id)
        if temp_id < 10:
            id_str = "0{}".format(temp_id)
        else:
            id_str = "{}".format(temp_id)

    # MSB加法器
    id = n
    if id < 10:
        id_str = "0{}".format(id)
    else:
        id_str = "{}".format(id)

    if id - 1 < 10:
        id_str_last = "0{}".format(id - 1)
    else:
        id_str_last = "{}".format(id - 1)

    print("    // Adder {}".format(id))

    print("    AFNS_Adder_{} adder{}( ".format(id_str, id_str))
    print("                            .flag(flags[{}]),".format(id))
    print("                            .in_a(out_a_{}),".format(id_str_last))
    print("                            .in_b(out_b_{}),".format(id_str_last))
    print("                            .out_a(out_a_{}),".format(id_str))
    print("                            .out_b(out_b_{})".format(id_str))
    print("                            );")
    print("    ")


    print("endmodule")





def verilog_generate_CascadedDyMFNSAddersNormal(n):
    '''


    :param n:
    :return:
    '''
    assert isinstance(n, int)
    assert n > 1
    assert n < 100

    def print_output_ports_decl(id, is_end):
        assert 1 < id <= n
        if id < 10:
            id_str = "0{}".format(id)
        else:
            id_str = "{}".format(id)

        if id - 1 < 10:
            id_str_last = "0{}".format(id - 1)
        else:
            id_str_last = "{}".format(id - 1)

        if is_end:
            endstr = ""
        else:
            endstr = ","

        print("    output wire [`DYMFNS_ADDER_OUTA_BLEN_{} - 1 : 0] out_a_{},".format(id, id_str))
        print("    output wire [`DYMFNS_ADDER_OUTB_BLEN_{} - 1 : 0] out_b_{}{}".format(id, id_str, endstr))

    def print_adder_instance(id):
        assert 1 < id <= n
        if id < 10:
            id_str = "0{}".format(id)
        else:
            id_str = "{}".format(id)

        if id - 1 < 10:
            id_str_last = "0{}".format(id - 1)
        else:
            id_str_last = "{}".format(id - 1)

        print("    // Adder {}".format(id))


        print("    DyMFNS_Adder_{} adder{}(.flag_left(flags[{}]), ".format(id_str, id_str, id - 1))
        print("                            .flag(flags[{}]),".format(id))
        print("                            .flag_right(flags[{}]),".format(id + 1))
        print("                            .flag_notlsb_in(flags_notlsb[{}]), ".format(id))
        print("                            .in_a(out_a_{}),".format(id_str_last))
        print("                            .in_b(out_b_{}),".format(id_str_last))
        print("                            .flag_notlsb_out(flags_notlsb[{}]),".format(id + 1))
        print("                            .out_a(out_a_{}),".format(id_str))
        print("                            .out_b(out_b_{})".format(id_str))
        print("                            );")
        print("    ")

    # 头部
    if n < 10:
        n_str = "0{}".format(n)
    else:
        n_str = "{}".format(n)
    print("// Generated by cac_main.verilog_generation_tools. Version: 2022.01.09.00")
    print("`include \"Header_DyMFNS.vh\"")
    print("module DyMFNS_CascadedAdders_N{}(".format(n_str))
    print("    // flags")
    print("    input wire [1:{}] flags,".format(n))
    print("    // Output ports")
    print("    output wire out_a_01,")
    print("    output wire out_b_01,")
    for temp_id_i in range(2, n):
        print_output_ports_decl(id=temp_id_i, is_end=False)
    print_output_ports_decl(id=n, is_end=True)
    print("    );")
    print("    ")
    print("    // flags")
    print("    wire [{}:2] flags_notlsb; ".format(n))
    print("    ")

    # LSB加法器
    print("//////////////////////////////////////////////////////////////////////////////////")
    print("// Design")
    print("//////////////////////////////////////////////////////////////////////////////////")
    print("    ")
    print(
        "    DyMFNS_Adder_01 adder01(.flag(flags[1]), .flag_notlsb_out(flags_notlsb[2]), .out_a(out_a_01), .out_b(out_b_01));")
    print("    ")

    # 中间的加法器
    for temp_id in range(2, n):
        print_adder_instance(id=temp_id)


    # MSB加法器
    id = n
    if id < 10:
        id_str = "0{}".format(id)
    else:
        id_str = "{}".format(id)

    if id - 1 < 10:
        id_str_last = "0{}".format(id - 1)
    else:
        id_str_last = "{}".format(id - 1)

    print("    // Adder {}".format(id))

    print("    DyMFNS_Adder_{} adder{}(.flag_left(flags[{}]), ".format(id_str, id_str, id - 1))
    print("                            .flag(flags[{}]),".format(id))
    print("                            .flag_right(1'b1),")
    print("                            .flag_notlsb_in(flags_notlsb[{}]), ".format(id))
    print("                            .in_a(out_a_{}),".format(id_str_last))
    print("                            .in_b(out_b_{}),".format(id_str_last))
    print("                            .flag_notlsb_out(),")
    print("                            .out_a(out_a_{}),".format(id_str))
    print("                            .out_b(out_b_{})".format(id_str))
    print("                            );")
    print("    ")


    print("endmodule")


def tcl_generation_CascadedAFNSAddersNormal(n):
    assert isinstance(n, int)
    assert n > 3
    for id_i in range(3, n+1):
        if id_i < 10:
            id_str = "0{}".format(id_i)
        else:
            id_str = "{}".format(id_i)
        print("read_file -format verilog AFNS_CascadedAdders_N{}.v".format(id_str))
        print("set current_design AFNS_CascadedAdders_N{}".format(id_str))
        print("link")
        print("reset_design")
        print("set_max_area 0")
        print("compile_ultra")
        print("report_area > AFNS_CascadedAdders_N{}.area_rpt".format(id_str))
        print("\n")



def tcl_generation_CascadedDyMFNSAddersNormal(n):
    assert isinstance(n, int)
    assert n > 3
    for id_i in range(3, n+1):
        if id_i < 10:
            id_str = "0{}".format(id_i)
        else:
            id_str = "{}".format(id_i)
        print("read_file -format verilog DyMFNS_CascadedAdders_N{}.v".format(id_str))
        print("set current_design DyMFNS_CascadedAdders_N{}".format(id_str))
        print("link")
        print("reset_design")
        print("set_max_area 0")
        print("compile_ultra")
        print("report_area > DyMFNS_CascadedAdders_N{}.area_rpt".format(id_str))
        print("\n")




#################################main
# verilog_generate_CascadedDyMFNSAddersNormal(n=20)
tcl_generation_CascadedAFNSAddersNormal(n=20)


